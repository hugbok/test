version: '3.9'
services:
  diameter-2220:
    image: synhfdocker/diameter-st-diameter:main
    environment:
      - SPS_ROUTE=skuta
      - SERVER_NAME=skuta-entserver1
      - DESTINATION_HOST=10.143.2.97
      - DESTINATION_PORT=2220
      - SOURCE_PORT=2220
      - DATADOG_HOST=agent
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 30
        window: 120s
    depends_on:
      rabbitmq:
        condition: service_healthy
        
  diameter-2221:
    image: synhfdocker/diameter-st-diameter:main
    environment:
      - SPS_ROUTE=skuta
      - SERVER_NAME=skuta-entserver1
      - DESTINATION_HOST=10.143.2.98
      - DESTINATION_PORT=2221
      - SOURCE_PORT=2221
      - DATADOG_HOST=agent
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 30
        window: 120s
    depends_on:
      rabbitmq:
        condition: service_healthy

  diameter-3220:
    image: synhfdocker/diameter-st-diameter:main
    environment:
      - SPS_ROUTE=korpa
      - SERVER_NAME=skuta-entserver1
      - DESTINATION_HOST=10.143.130.97
      - DESTINATION_PORT=3220
      - SOURCE_PORT=3220
      - DATADOG_HOST=agent
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 30
        window: 120s
    depends_on:
      rabbitmq:
        condition: service_healthy

  diameter-3221:
    image: synhfdocker/diameter-st-diameter:main
    environment:
      - SPS_ROUTE=korpa
      - SERVER_NAME=skuta-entserver1
      - DESTINATION_HOST=10.143.130.98
      - DESTINATION_PORT=3221
      - SOURCE_PORT=3221
      - DATADOG_HOST=agent
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 30
        window: 120s
    depends_on:
      rabbitmq:
        condition: service_healthy
     
  from-diameter:
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 30
        window: 120s
    environment:
      - SPS_ROUTE=skuta
      - SERVER_NAME=skuta-entserver1
      - DATADOG_HOST=agent
    volumes:
      - db:/db
    image: synhfdocker/diameter-st-from-diameter:main
    depends_on:
      rabbitmq:
        condition: service_healthy
        
  from-web:
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 30
        window: 120s
    environment:
      - SPS_ROUTE=skuta
      - SERVER_NAME=skuta-entserver1
      - DATADOG_HOST=agent
    image: synhfdocker/diameter-st-from-web:main
    depends_on:
      rabbitmq:
        condition: service_healthy
        
  device-watchdog:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 30
        window: 120s
    environment:
      - SPS_ROUTE=skuta
      - SERVER_NAME=skuta-entserver1
      - DATADOG_HOST=agent
    image: synhfdocker/diameter-st-watchdog:main
    depends_on:
      rabbitmq:
        condition: service_healthy
        
  web:
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 30
        window: 120s
    environment:
      - SPS_ROUTE=skuta
      - SERVER_NAME=skuta-entserver1
      - DATADOG_HOST=agent
    image: synhfdocker/diameter-st-web:main
    depends_on:
      rabbitmq:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`10.187.2.2`, `entitlement-lb-diameter.itnet.is`)"
      - "traefik.http.services.web.loadbalancer.server.port=80"
      
  rabbitmq:
    environment:
      - DATADOG_HOST=agent
    image: rabbitmq:3-management
    container_name: 'rabbitmq'
    ports:
      - '15672:15672'
    volumes:
      - ./rabbitmq/:/etc/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 60s
      retries: 3
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 30
        window: 120s
      
  traefik:
    # Fixed to version 2.9, since Traefik has a history of doing breaking API changes
    # read the changelog before upgrading ( latest is not safe with Traefik even though
    # this is simple )
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  #DD_API_KEY variable added instead of cleartext API key. Has to be added to the stack in Portainer.
  agent:
    image: "datadog/agent:latest"
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=TRUE
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      #- DD_CONTAINER_EXCLUDE="name:datadog-agent"
      - DD_ENV=prod
      - DD_SITE=datadoghq.eu
      - HTTP_PROXY=http://inproxy.itnet.is:8080
      - HTTPS_PROXY=http://inproxy.itnet.is:8080
      - NO_PROXY=10.0.0.0/8,172.16.0.0/12
      - DD_CONTAINER_EXCLUDE=image:datadog-agent image:rabbitmq:3-management-alpine
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro

volumes:
  db:
